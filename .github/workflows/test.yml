name: Build GKI - TEST

on:
  workflow_call:      # Allows calling from another workflow
   inputs:

    KernelSU:
      type: string

    SUSFS4KSU:
      type: string

    Clang:
      type: string

    BUILD_BOOTIMG:
      type: string

    UPLOAD2GH:
      type: string

    BUILD_LKMS:
      type: string

    KSU_MANUAL_HOOK:
      type: string

  workflow_dispatch: # Allows triggering workflow manually
   inputs:

    KernelSU:
      description: 'KernelSU Variant'
      default: 'None'
      type: choice
      options:
      - 'None'
      - 'Official KernelSU'
      - 'KernelSU-Next'
      - 'Rissu KernelSU Fork'
      - "xx's KernelSU Fork"

    SUSFS4KSU:
      description: 'SUSFS4KSU (KSU Needed)'
      default: false
      type: boolean

    Clang:
      description: 'Select Compiler'
      default: 'Default'
      type: choice
      options:
      - 'Default'
      - 'AOSP Clang'
      - 'Custom Clang'

    BUILD_BOOTIMG:
      description: 'Build Boot Image'
      default: false
      type: boolean

    UPLOAD2GH:
      description: 'Upload to GitHub Release'
      default: false
      type: boolean

    BUILD_LKMS:
      description: 'Build LKMs (.ko)'
      default: false
      type: boolean

    KSU_MANUAL_HOOK:
      description: 'KSU Manual Hook'
      default: false
      type: boolean

env:
    CHAT_ID: ${{ secrets.CHAT_ID }}
    TOKEN: ${{ secrets.TOKEN }}
    GH_TOKEN: ${{ secrets.GH_TOKEN }}
    STATUS: "BETA"
    BUILD_KERNEL: "true"

jobs:
  build:
    name: Build GKI
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
       export MAN_DISABLE=true
       sudo apt update -y
       sudo apt install bc cpio flex bison aptitude gh git python-is-python3 tar perl wget curl lz4 zstd libarchive-tools ccache -y
       sudo aptitude install libssl-dev -y

    - name: Set Swap Space
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: kernel cache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: kernel-${{ github.run_id }}
        max-size: 4G
        restore-keys: |
          kernel-

    - name: Restore Toolchain Cache
      uses: actions/cache/restore@v3
      with:
        path: ~/tc
        key: tc-
        restore-keys: |
          tc-

    - name: Build
      run: |
       chmod a+x *.sh

       if [[ "${{ inputs.KernelSU }}" != "None" ]]; then
            export USE_KSU="true"
       fi

       if [[ "${{ inputs.KSU_MANUAL_HOOK }}" == "true" ]]; then
            sed -i 's/KSU_USE_MANUAL_HOOK=.*/KSU_USE_MANUAL_HOOK=true/g' config.sh
       else
            sed -i 's/KSU_USE_MANUAL_HOOK=.*/KSU_USE_MANUAL_HOOK=false/g' config.sh
       fi

       if [[ "${{ inputs.KernelSU }}" == "Official KernelSU" ]]; then
            export USE_KSU_OFC="true"
       elif [[ "${{ inputs.KernelSU }}" == "KernelSU-Next" ]]; then
            export USE_KSU_NEXT="true"
       elif [[ "${{ inputs.KernelSU }}" == "Rissu KernelSU Fork" ]]; then
            export USE_KSU_RKSU="true"
       elif [[ "${{ inputs.KernelSU }}" == "xx's KernelSU Fork" ]]; then
            export USE_KSU_XX="true"
       fi

       if [[ "${{ inputs.Clang }}" == "AOSP Clang" ]]; then
            sed -i 's/USE_CUSTOM_CLANG=.*/USE_CUSTOM_CLANG=false/g' config.sh
            sed -i 's/USE_AOSP_CLANG=.*/USE_AOSP_CLANG=true/g' config.sh
       elif [[ "${{ inputs.Clang }}" == "Custom Clang" ]]; then
            sed -i 's/USE_CUSTOM_CLANG=.*/USE_CUSTOM_CLANG=true/g' config.sh
            sed -i 's/USE_AOSP_CLANG=.*/USE_AOSP_CLANG=false/g' config.sh
       elif [[ "${{ inputs.Clang }}" == "Default" ]]; then
            : # follow config.sh
       fi

       export USE_KSU_SUSFS="${{ inputs.SUSFS4KSU }}"
       export BUILD_LKMS="${{ inputs.BUILD_LKMS }}"
       export BUILD_BOOTIMG="${{ inputs.BUILD_BOOTIMG }}"
       export UPLOAD2GH="${{ inputs.UPLOAD2GH }}"
       export PATH="/usr/lib/ccache:$PATH"
       ./build.sh

    - name: Save Toolchain Cache
      if: |
        always() && !cancelled()
      uses: actions/cache/save@v3
      with:
        path: ~/tc
        key: tc-${{ hashFiles('$HOME/tc/bin/clang') }}

    - name: Upload kernel zip
      uses: actions/upload-artifact@v4
      if: inputs.UPLOAD2GH == false
      with:
        name: kernel-${{ github.run_number }}
        path: "./*.zip"
        retention-days: 1

    - name: Upload boot image (gzip)
      uses: actions/upload-artifact@v4
      if: inputs.BUILD_BOOTIMG == true && inputs.UPLOAD2GH == false
      with:
        name: boot-gz-${{ github.run_number }}
        path: "./*-gz.img"
        retention-days: 1

    - name: Upload boot image (lz4)
      uses: actions/upload-artifact@v4
      if: inputs.BUILD_BOOTIMG == true && inputs.UPLOAD2GH == false
      with:
        name: boot-lz4-${{ github.run_number }}
        path: "./*-lz4.img"
        retention-days: 1

    - name: Upload boot image (raw)
      uses: actions/upload-artifact@v4
      if: inputs.BUILD_BOOTIMG == true && inputs.UPLOAD2GH == false
      with:
        name: boot-raw-${{ github.run_number }}
        path: "./*-raw.img"
        retention-days: 1

    - name: Delete Old Kernel & Toolchain Cache (Keep 2 Newest Each)
      run: |
        delete_old_caches() {
          local PREFIX=$1
          echo "Checking caches for: $PREFIX"

          # Get all cache keys matching prefix, sorted by date (newest first)
          CACHE_KEYS=$(gh cache list --json key,createdAt | jq -r "
            sort_by(.createdAt) | 
            reverse | 
            map(select(.key | startswith(\"$PREFIX\"))) | 
            .[2:] | # Skip the two newest
            .[].key"
          )

          # Delete old caches
          for key in $CACHE_KEYS; do
            echo "Deleting cache: $key"
            gh cache delete "$key"
          done
        }

        # Delete old kernel and toolchain caches
        delete_old_caches "kernel-"
        delete_old_caches "tc-"
