name: Build GKI

on:
  workflow_call:
    inputs:
      KernelSU:
        type: string
      SUSFS4KSU:
        type: string
      Clang:
        type: string
      BUILD_BOOTIMG:
        type: string
      UPLOAD2GH:
        type: string
      BUILD_LKMS:
        type: string
      KSU_MANUAL_HOOK:
        type: string

  workflow_dispatch:
    inputs:
      KernelSU:
        description: KernelSU Variant
        default: None
        type: choice
        options:
          - "None"
          - "Official"
          - "Next"
          - "Rissu"
          - "xx's"

      SUSFS4KSU:
        description: SUSFS4KSU (KSU Needed)
        default: false
        type: boolean

      Clang:
        description: Select Compiler
        default: Default
        type: choice
        options:
          - "Default"
          - "AOSP"
          - "Custom"

      BUILD_BOOTIMG:
        description: Build Boot Image
        default: false
        type: boolean

      UPLOAD2GH:
        description: Upload to GitHub Release
        default: false
        type: boolean

      BUILD_LKMS:
        description: Build LKMs (.ko)
        default: false
        type: boolean

      KSU_MANUAL_HOOK:
        description: KSU Manual Hook
        default: false
        type: boolean

env:
  CHAT_ID: ${{ secrets.CHAT_ID }}
  TOKEN: ${{ secrets.TOKEN }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  BUILD_KERNEL: "true"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set STATUS Based on Trigger Type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "STATUS=BETA" >> $GITHUB_ENV
          else
            echo "STATUS=STABLE" >> $GITHUB_ENV
          fi


      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          export MAN_DISABLE=true
          sudo apt update -y
          sudo apt install bc cpio flex bison aptitude gh git python-is-python3 tar perl wget curl lz4 zstd libarchive-tools ccache -y
          sudo aptitude install libssl-dev -y

      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: Restore Toolchain Cache
        uses: actions/cache/restore@v3
        with:
          path: tc
          key: tc-
          restore-keys: |
            tc-

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.run_number }}
          restore-keys: ccache-
          max-size: 4G

      - name: Build Kernel
        run: |
          chmod a+x *.sh

          if [[ "${{ inputs.KernelSU }}" != "None" ]]; then
            export USE_KSU="true"
          fi

          if [[ "${{ inputs.KernelSU }}" == "Official" ]]; then
            export USE_KSU_OFC="true"
          elif [[ "${{ inputs.KernelSU }}" == "Next" ]]; then
            export USE_KSU_NEXT="true"
          elif [[ "${{ inputs.KernelSU }}" == "Rissu" ]]; then
            export USE_KSU_RKSU="true"
          elif [[ "${{ inputs.KernelSU }}" == "xx\'s" ]]; then
            export USE_KSU_XX="true"
          fi

          if [[ "${{ inputs.Clang }}" == "AOSP" ]]; then
            sed -i 's/USE_CUSTOM_CLANG=.*/USE_CUSTOM_CLANG=false/g' config.sh
            sed -i 's/USE_AOSP_CLANG=.*/USE_AOSP_CLANG=true/g' config.sh
          elif [[ "${{ inputs.Clang }}" == "Custom" ]]; then
            sed -i 's/USE_CUSTOM_CLANG=.*/USE_CUSTOM_CLANG=true/g' config.sh
            sed -i 's/USE_AOSP_CLANG=.*/USE_AOSP_CLANG=false/g' config.sh
          elif [[ "${{ inputs.Clang }}" == "Default" ]]; then
            : # follow config.sh
          fi

          export USE_KSU_SUSFS="${{ inputs.SUSFS4KSU }}"
          export BUILD_LKMS="${{ inputs.BUILD_LKMS }}"
          export BUILD_BOOTIMG="${{ inputs.BUILD_BOOTIMG }}"
          export UPLOAD2GH="${{ inputs.UPLOAD2GH }}"
          export USE_KSU_MANUAL_HOOK="${{ inputs.KSU_MANUAL_HOOK }}"
          export NIGHTLY_LINK="https://nightly.link/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}"
          export PATH="/usr/lib/ccache:$PATH"
          ./build.sh

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BASE_NAME }}
          retention-days: 1
          path: |
            artifacts/*.zip
            artifacts/*.img

      - name: Save Toolchain Cache
        if: always() && !cancelled()
        uses: actions/cache/save@v3
        with:
          path: tc
          key: tc-${{ hashFiles('tc/bin/clang') }}

      - name: Delete Old Kernel & Toolchain Cache (Keep 2 Newest Each)
        run: |
          delete_old_caches() {
            local PREFIX=$1
            echo "Checking caches for: $PREFIX"
            CACHE_KEYS=$(gh cache list --json key,createdAt | jq -r "
              sort_by(.createdAt) | 
              reverse | 
              map(select(.key | startswith(\"$PREFIX\"))) | 
              .[2:] | 
              .[].key"
            )
            for key in $CACHE_KEYS; do
              echo "Deleting cache: $key"
              gh cache delete "$key"
            done
          }

          delete_old_caches "ccache-"
          delete_old_caches "tc-"
